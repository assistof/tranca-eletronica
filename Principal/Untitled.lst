CCS PCH C Compiler, Version 4.074, 38112               09-dez-13 16:28

               Filename: Untitled.lst

               ROM used: 3142 bytes (10%)
                         Largest free fragment is 29626
               RAM used: 16 (1%) at main() level
                         30 (1%) worst case
               Stack:    5 locations

*
0000:  GOTO   062C
.................... #include<18f4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #include <lcd.h> 
....................  
.................... #ifndef lcd_enable 
.................... #define lcd_enable   pin_b1        // pino enable do LCD -> e1 
.................... #define lcd_rs       pin_b0        // pino rs do LCD -> e0 
.................... //#define lcd_rw       pin_b2        // pino rw do LCD 
.................... #define lcd_d4       pin_b4        // pino de dados d4 do LCD 
.................... #define lcd_d5       pin_b5        // pino de dados d5 do LCD 
.................... #define lcd_d6       pin_b6        // pino de dados d6 do LCD 
.................... #define lcd_d7       pin_b7        // pino de dados d7 do LCD 
.................... #endif 
.................... #use delay(crystal=4MHZ) 
*
016A:  CLRF   FEA
016C:  MOVLW  16
016E:  MOVWF  FE9
0170:  MOVF   FEF,W
0172:  BZ    0190
0174:  MOVLW  01
0176:  MOVWF  01
0178:  CLRF   00
017A:  DECFSZ 00,F
017C:  BRA    017A
017E:  DECFSZ 01,F
0180:  BRA    0178
0182:  MOVLW  4A
0184:  MOVWF  00
0186:  DECFSZ 00,F
0188:  BRA    0186
018A:  BRA    018C
018C:  DECFSZ FEF,F
018E:  BRA    0174
0190:  RETLW  00
.................... #define lcd_type 2 // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40 // Endere?o da segunda linha na RAM do LCD 
.................... char k=1; 
.................... void liga_cursor() 
....................  { 
....................    k = 0; 
....................   } 
.................... void desliga_cursor() 
....................  { 
....................    k = 1; 
....................  } 
.................... // a constante abaixo define a sequência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // l? um byte do LCD (somente com pino RW) 
.................... { 
.................... byte dado; 
.................... // configura os pinos de dados como entradas 
.................... input(lcd_d4); 
.................... input(lcd_d5); 
.................... input(lcd_d6); 
.................... input(lcd_d7); 
.................... // se o pino rw for utilizado, coloca em 1 
.................... #ifdef lcd_rw 
.................... output_high(lcd_rw);  
.................... #endif 
.................... output_high(lcd_enable); // habilita display 
.................... dado = 0; // zera a vari?vel de leitura 
.................... // l? os quatro bits mais significativos 
.................... if (input(lcd_d7)) bit_set(dado,7); 
.................... if (input(lcd_d6)) bit_set(dado,6); 
.................... if (input(lcd_d5)) bit_set(dado,5); 
.................... if (input(lcd_d4)) bit_set(dado,4); 
.................... // d? um pulso na linha enable 
.................... output_low(lcd_enable); 
.................... output_high(lcd_enable); 
.................... // l? os quatro bits menos significativos 
.................... if (input(lcd_d7)) bit_set(dado,3); 
.................... if (input(lcd_d6)) bit_set(dado,2); 
.................... if (input(lcd_d5)) bit_set(dado,1); 
.................... if (input(lcd_d4)) bit_set(dado,0); 
.................... output_low(lcd_enable); // desabilita o display 
.................... return dado; // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... // coloca os quatro bits nas saidas 
.................... output_bit(lcd_d4,bit_test(dado,0)); 
0192:  BTFSC  1D.0
0194:  BRA    019A
0196:  BCF    F8A.4
0198:  BRA    019C
019A:  BSF    F8A.4
019C:  BCF    F93.4
.................... output_bit(lcd_d5,bit_test(dado,1)); 
019E:  BTFSC  1D.1
01A0:  BRA    01A6
01A2:  BCF    F8A.5
01A4:  BRA    01A8
01A6:  BSF    F8A.5
01A8:  BCF    F93.5
.................... output_bit(lcd_d6,bit_test(dado,2)); 
01AA:  BTFSC  1D.2
01AC:  BRA    01B2
01AE:  BCF    F8A.6
01B0:  BRA    01B4
01B2:  BSF    F8A.6
01B4:  BCF    F93.6
.................... output_bit(lcd_d7,bit_test(dado,3)); 
01B6:  BTFSC  1D.3
01B8:  BRA    01BE
01BA:  BCF    F8A.7
01BC:  BRA    01C0
01BE:  BSF    F8A.7
01C0:  BCF    F93.7
.................... // d? um pulso na linha enable 
.................... output_high(lcd_enable); 
01C2:  BCF    F93.1
01C4:  BSF    F8A.1
.................... output_low(lcd_enable); 
01C6:  BCF    F93.1
01C8:  BCF    F8A.1
.................... } 
01CA:  RETLW  00
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... // coloca a linha rs em 0 
.................... output_low(lcd_rs); 
01CC:  BCF    F93.0
01CE:  BCF    F8A.0
.................... // aguarda o display ficar desocupado 
.................... //while ( bit_test(lcd_le_byte(),7) ) ; 
.................... // configura a linha rs dependendo do modo selecionado 
.................... output_bit(lcd_rs,endereco); 
01D0:  MOVF   1A,F
01D2:  BNZ   01D8
01D4:  BCF    F8A.0
01D6:  BRA    01DA
01D8:  BSF    F8A.0
01DA:  BCF    F93.0
.................... delay_us(100); // aguarda 100 us 
01DC:  MOVLW  21
01DE:  MOVWF  00
01E0:  DECFSZ 00,F
01E2:  BRA    01E0
.................... // caso a linha rw esteja definida, coloca em 0 
.................... #ifdef lcd_rw 
.................... output_low(lcd_rw); 
.................... #endif 
.................... // desativa linha enable 
.................... output_low(lcd_enable); 
01E4:  BCF    F93.1
01E6:  BCF    F8A.1
.................... // envia a primeira parte do byte 
.................... lcd_envia_nibble(dado >> 4); 
01E8:  SWAPF  1B,W
01EA:  MOVWF  1C
01EC:  MOVLW  0F
01EE:  ANDWF  1C,F
01F0:  MOVFF  1C,1D
01F4:  RCALL  0192
.................... // envia a segunda parte do byte 
.................... lcd_envia_nibble(dado & 0x0f); 
01F6:  MOVF   1B,W
01F8:  ANDLW  0F
01FA:  MOVWF  1C
01FC:  MOVWF  1D
01FE:  RCALL  0192
.................... } 
0200:  RETLW  00
....................  
.................... void lcd_posicao( byte y, byte x) 
.................... { 
.................... byte endereco; 
.................... if(y!=1) 
0202:  DECFSZ 16,W
0204:  BRA    0208
0206:  BRA    020E
.................... endereco = lcd_seg_lin; 
0208:  MOVLW  40
020A:  MOVWF  18
.................... else 
020C:  BRA    0210
.................... endereco = 0; 
020E:  CLRF   18
.................... endereco += x-1; 
0210:  MOVLW  01
0212:  SUBWF  17,W
0214:  ADDWF  18,F
.................... lcd_envia_byte(0,0x80|endereco); 
0216:  MOVF   18,W
0218:  IORLW  80
021A:  MOVWF  19
021C:  CLRF   1A
021E:  MOVWF  1B
0220:  RCALL  01CC
.................... } 
0222:  RETLW  00
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
.................... switch (c) 
.................... { 
0224:  MOVF   15,W
0226:  XORLW  0C
0228:  BZ    0238
022A:  XORLW  06
022C:  BZ    0248
022E:  XORLW  07
0230:  BZ    0248
0232:  XORLW  05
0234:  BZ    0254
0236:  BRA    025E
.................... case '\f' : lcd_envia_byte(0,1); 
0238:  CLRF   1A
023A:  MOVLW  01
023C:  MOVWF  1B
023E:  RCALL  01CC
.................... delay_ms(2); 
0240:  MOVLW  02
0242:  MOVWF  16
0244:  RCALL  016A
.................... break; 
0246:  BRA    0282
.................... case '\n' : 
.................... case '\r' : lcd_posicao(1,2); 
0248:  MOVLW  01
024A:  MOVWF  16
024C:  MOVLW  02
024E:  MOVWF  17
0250:  RCALL  0202
.................... break; 
0252:  BRA    0282
.................... case '\b' : lcd_envia_byte(0,0x10); 
0254:  CLRF   1A
0256:  MOVLW  10
0258:  MOVWF  1B
025A:  RCALL  01CC
.................... break; 
025C:  BRA    0282
.................... default : lcd_envia_byte(1,c); 
025E:  MOVLW  01
0260:  MOVWF  1A
0262:  MOVFF  15,1B
0266:  RCALL  01CC
....................           if (k) 
0268:  MOVF   05,F
026A:  BZ    0274
....................           lcd_envia_byte(0,0x0C); 
026C:  CLRF   1A
026E:  MOVLW  0C
0270:  MOVWF  1B
0272:  RCALL  01CC
....................           if (!k) 
0274:  MOVF   05,F
0276:  BNZ   0280
....................             lcd_envia_byte(0,0x0F); 
0278:  CLRF   1A
027A:  MOVLW  0F
027C:  MOVWF  1B
027E:  RCALL  01CC
....................  
.................... break; 
0280:  BRA    0282
.................... } 
.................... } 
0282:  RETLW  00
....................  
.................... void lcd_inicializa() 
.................... // rotina de inicializa??o do display 
.................... { 
.................... byte conta; 
.................... output_low(lcd_d4); 
0284:  BCF    F93.4
0286:  BCF    F8A.4
.................... output_low(lcd_d5); 
0288:  BCF    F93.5
028A:  BCF    F8A.5
.................... output_low(lcd_d6); 
028C:  BCF    F93.6
028E:  BCF    F8A.6
.................... output_low(lcd_d7); 
0290:  BCF    F93.7
0292:  BCF    F8A.7
.................... output_low(lcd_rs); 
0294:  BCF    F93.0
0296:  BCF    F8A.0
.................... #ifdef lcd_rw 
.................... output_high(lcd_rw); 
.................... #endif 
.................... output_low(lcd_enable); 
0298:  BCF    F93.1
029A:  BCF    F8A.1
.................... delay_ms(15); 
029C:  MOVLW  0F
029E:  MOVWF  16
02A0:  RCALL  016A
.................... // envia uma seq??ncia de 3 vezes 0x03 
.................... // e depois 0x02 para configurar o m?dulo 
.................... // para modo de 4 bits 
.................... for(conta=1;conta<=3;++conta) 
02A2:  MOVLW  01
02A4:  MOVWF  0F
02A6:  MOVF   0F,W
02A8:  SUBLW  03
02AA:  BNC   02BC
.................... { 
.................... lcd_envia_nibble(3); 
02AC:  MOVLW  03
02AE:  MOVWF  1D
02B0:  RCALL  0192
.................... delay_ms(5); 
02B2:  MOVLW  05
02B4:  MOVWF  16
02B6:  RCALL  016A
.................... } 
02B8:  INCF   0F,F
02BA:  BRA    02A6
.................... lcd_envia_nibble(2); 
02BC:  MOVLW  02
02BE:  MOVWF  1D
02C0:  RCALL  0192
.................... // envia string de inicializa??o do display 
.................... for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
02C2:  CLRF   0F
02C4:  MOVF   0F,W
02C6:  SUBLW  03
02C8:  BNC   02E6
02CA:  CLRF   03
02CC:  MOVF   0F,W
02CE:  MOVFF  FF2,10
02D2:  BCF    FF2.7
02D4:  RCALL  0004
02D6:  BTFSC  10.7
02D8:  BSF    FF2.7
02DA:  MOVWF  11
02DC:  CLRF   1A
02DE:  MOVWF  1B
02E0:  RCALL  01CC
02E2:  INCF   0F,F
02E4:  BRA    02C4
.................... lcd_posicao(1,1); lcd_escreve("                "); 
02E6:  MOVLW  01
02E8:  MOVWF  16
02EA:  MOVWF  17
02EC:  RCALL  0202
02EE:  CLRF   10
02F0:  MOVF   10,W
02F2:  RCALL  0018
02F4:  IORLW  00
02F6:  BZ    0300
02F8:  INCF   10,F
02FA:  MOVWF  15
02FC:  RCALL  0224
02FE:  BRA    02F0
.................... lcd_posicao(2,1); lcd_escreve("                "); 
0300:  MOVLW  02
0302:  MOVWF  16
0304:  MOVLW  01
0306:  MOVWF  17
0308:  RCALL  0202
030A:  CLRF   10
030C:  MOVF   10,W
030E:  RCALL  0018
0310:  IORLW  00
0312:  BZ    031C
0314:  INCF   10,F
0316:  MOVWF  15
0318:  RCALL  0224
031A:  BRA    030C
.................... } 
031C:  GOTO   0664 (RETURN)
....................  
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... char valor; 
.................... // seleciona a posi??o do caractere 
.................... lcd_posicao(x,y); 
.................... // ativa rs 
.................... output_high(lcd_rs); 
.................... // l? o caractere 
.................... valor = lcd_le_byte(); 
.................... // desativa rs 
.................... output_low(lcd_rs); 
.................... // retorna o valor do caractere 
.................... return valor; 
.................... } 
....................  
.................... #use delay(crystal=4MHZ) 
0320:  CLRF   FEA
0322:  MOVLW  10
0324:  MOVWF  FE9
0326:  MOVF   FEF,W
0328:  BZ    0346
032A:  MOVLW  01
032C:  MOVWF  01
032E:  CLRF   00
0330:  DECFSZ 00,F
0332:  BRA    0330
0334:  DECFSZ 01,F
0336:  BRA    032E
0338:  MOVLW  4A
033A:  MOVWF  00
033C:  DECFSZ 00,F
033E:  BRA    033C
0340:  BRA    0342
0342:  DECFSZ FEF,F
0344:  BRA    032A
0346:  RETLW  00
0348:  MOVLW  15
034A:  SUBWF  10,F
034C:  BNC   036A
034E:  CLRF   FEA
0350:  MOVLW  10
0352:  MOVWF  FE9
0354:  MOVLW  FC
0356:  ANDWF  FEF,F
0358:  BCF    FD8.0
035A:  RRCF   FEF,F
035C:  RRCF   FEF,F
035E:  MOVF   FEF,W
0360:  BZ    036A
0362:  BRA    0366
0364:  NOP   
0366:  DECFSZ FEF,F
0368:  BRA    0364
036A:  RETLW  00
.................... #fuses nowdt,xt 
.................... #byte PORTB=0xf81 
.................... #byte PORTD=0xf83 
.................... int i = 0; 
.................... int j = 0; 
....................  
.................... #define B   PIN_B3 
.................... #define T   PIN_B2 
.................... #define C3  PIN_D0 
.................... #define C2  PIN_D5 
.................... #define C1  PIN_D6 
.................... #define L1  PIN_D1 
.................... #define L2  PIN_D2 
.................... #define L3  PIN_D3 
.................... #define L4  PIN_D4 
....................  
....................  
....................  
....................  
.................... void scan1(){            // Faz primeira varredura 
....................  
....................    int aux=100;           // ,Serve para ser a condição do while 
036C:  MOVLW  64
036E:  MOVWF  0F
....................    while(aux != 0)       // Loop para varre as colunas do teclado 
....................    { 
0370:  MOVF   0F,F
0372:  BZ    03C4
....................       output_low(L1);    // Implementa 0 na coluna a ser verificada,primeira linha da matriz 
0374:  BCF    F95.1
0376:  BCF    F8C.1
....................       output_high(L2); 
0378:  BCF    F95.2
037A:  BSF    F8C.2
....................       output_high(L3); 
037C:  BCF    F95.3
037E:  BSF    F8C.3
....................       output_high(L4); 
0380:  BCF    F95.4
0382:  BSF    F8C.4
....................  
....................       if(input(C1) == 0)     // Varre primeira coluna 
0384:  BSF    F95.6
0386:  BTFSC  F83.6
0388:  BRA    0396
....................       { 
....................          i = 3; 
038A:  MOVLW  03
038C:  MOVWF  06
....................          j ++; 
038E:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar tecla 
0390:  MOVLW  14
0392:  MOVWF  10
0394:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C2) == 0)     // Varre segunda coluna 
0396:  BSF    F95.5
0398:  BTFSC  F83.5
039A:  BRA    03A8
....................       { 
....................          i = 2; 
039C:  MOVLW  02
039E:  MOVWF  06
....................          j ++; 
03A0:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
03A2:  MOVLW  14
03A4:  MOVWF  10
03A6:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C3) == 0)     // Varre terceira coluna 
03A8:  BSF    F95.0
03AA:  BTFSC  F83.0
03AC:  BRA    03BA
....................       { 
....................          i = 1; 
03AE:  MOVLW  01
03B0:  MOVWF  06
....................          j ++; 
03B2:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
03B4:  MOVLW  14
03B6:  MOVWF  10
03B8:  RCALL  0320
....................                           
....................       } 
....................  
....................       aux--;             // Decrementa 1 de aux 
03BA:  DECF   0F,F
....................       delay_us(aux);      
03BC:  MOVFF  0F,10
03C0:  RCALL  0348
....................    } 
03C2:  BRA    0370
....................  
....................       output_high(L1); 
03C4:  BCF    F95.1
03C6:  BSF    F8C.1
....................       output_high(L2); 
03C8:  BCF    F95.2
03CA:  BSF    F8C.2
....................       output_high(L3); 
03CC:  BCF    F95.3
03CE:  BSF    F8C.3
....................       output_high(L4); 
03D0:  BCF    F95.4
03D2:  BSF    F8C.4
....................  
....................    return;               // Retorna ao main 
.................... }                         
03D4:  RETLW  00
....................  
....................  
....................  
.................... //________________________________________________________________________________ 
....................  
....................  
....................  
.................... void scan2(){            // Faz segunda varredura 
....................  
....................    int aux=100;          // ,Serve para ser a condição do while 
03D6:  MOVLW  64
03D8:  MOVWF  0F
....................    while(aux != 0)       // Loop para varre as colunas do teclado 
....................    { 
03DA:  MOVF   0F,F
03DC:  BZ    042E
....................       output_high(L1);    // Implementa 0 na coluna a ser verificada,segunda linha da matriz 
03DE:  BCF    F95.1
03E0:  BSF    F8C.1
....................       output_low(L2); 
03E2:  BCF    F95.2
03E4:  BCF    F8C.2
....................       output_high(L3); 
03E6:  BCF    F95.3
03E8:  BSF    F8C.3
....................       output_high(L4); 
03EA:  BCF    F95.4
03EC:  BSF    F8C.4
....................  
....................       if(input(C1) == 0)     // Varre primeira coluna 
03EE:  BSF    F95.6
03F0:  BTFSC  F83.6
03F2:  BRA    0400
....................       { 
....................          i = 6; 
03F4:  MOVLW  06
03F6:  MOVWF  06
....................          j ++; 
03F8:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar tecla 
03FA:  MOVLW  14
03FC:  MOVWF  10
03FE:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C2) == 0)     // Varre segunda coluna 
0400:  BSF    F95.5
0402:  BTFSC  F83.5
0404:  BRA    0412
....................       { 
....................          i = 5; 
0406:  MOVLW  05
0408:  MOVWF  06
....................          j ++; 
040A:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
040C:  MOVLW  14
040E:  MOVWF  10
0410:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C3) == 0)     // Varre terceira coluna 
0412:  BSF    F95.0
0414:  BTFSC  F83.0
0416:  BRA    0424
....................       { 
....................          i = 4; 
0418:  MOVLW  04
041A:  MOVWF  06
....................          j ++; 
041C:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
041E:  MOVLW  14
0420:  MOVWF  10
0422:  RCALL  0320
....................                           
....................       } 
....................  
....................       aux--;             // Decrementa 1 de aux 
0424:  DECF   0F,F
....................       delay_us(aux);      
0426:  MOVFF  0F,10
042A:  RCALL  0348
....................    } 
042C:  BRA    03DA
....................  
....................       output_high(L1); 
042E:  BCF    F95.1
0430:  BSF    F8C.1
....................       output_high(L2); 
0432:  BCF    F95.2
0434:  BSF    F8C.2
....................       output_high(L3); 
0436:  BCF    F95.3
0438:  BSF    F8C.3
....................       output_high(L4); 
043A:  BCF    F95.4
043C:  BSF    F8C.4
....................  
....................    return;               // // Retorna ao main 
.................... }                         
043E:  RETLW  00
....................  
....................  
....................  
.................... //________________________________________________________________________________ 
....................  
....................  
....................  
.................... void scan3(){            // Faz primeira varredura 
....................  
....................    int aux=100;          // ,Serve para ser a condição do while 
0440:  MOVLW  64
0442:  MOVWF  0F
....................    while(aux != 0)       // Loop para varre as colunas do teclado 
....................    { 
0444:  MOVF   0F,F
0446:  BZ    0498
....................       output_high(L1);    // Implementa 0 na coluna a ser verificada,terceira linha da matriz 
0448:  BCF    F95.1
044A:  BSF    F8C.1
....................       output_high(L2); 
044C:  BCF    F95.2
044E:  BSF    F8C.2
....................       output_low(L3); 
0450:  BCF    F95.3
0452:  BCF    F8C.3
....................       output_high(L4); 
0454:  BCF    F95.4
0456:  BSF    F8C.4
....................  
....................       if(input(C1) == 0)     // Varre primeira coluna 
0458:  BSF    F95.6
045A:  BTFSC  F83.6
045C:  BRA    046A
....................       { 
....................          i = 9; 
045E:  MOVLW  09
0460:  MOVWF  06
....................          j ++; 
0462:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar tecla 
0464:  MOVLW  14
0466:  MOVWF  10
0468:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C2) == 0)     // Varre segunda coluna 
046A:  BSF    F95.5
046C:  BTFSC  F83.5
046E:  BRA    047C
....................       { 
....................          i = 8; 
0470:  MOVLW  08
0472:  MOVWF  06
....................          j ++; 
0474:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
0476:  MOVLW  14
0478:  MOVWF  10
047A:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C3) == 0)     // Varre terceira coluna 
047C:  BSF    F95.0
047E:  BTFSC  F83.0
0480:  BRA    048E
....................       { 
....................          i = 7; 
0482:  MOVLW  07
0484:  MOVWF  06
....................          j ++; 
0486:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
0488:  MOVLW  14
048A:  MOVWF  10
048C:  RCALL  0320
....................                           
....................       } 
....................  
....................       aux--;             // Decrementa 1 de aux 
048E:  DECF   0F,F
....................       delay_us(aux);      
0490:  MOVFF  0F,10
0494:  RCALL  0348
....................    } 
0496:  BRA    0444
....................  
....................       output_high(L1); 
0498:  BCF    F95.1
049A:  BSF    F8C.1
....................       output_high(L2); 
049C:  BCF    F95.2
049E:  BSF    F8C.2
....................       output_high(L3); 
04A0:  BCF    F95.3
04A2:  BSF    F8C.3
....................       output_high(L4); 
04A4:  BCF    F95.4
04A6:  BSF    F8C.4
....................  
....................    return;              // Retorna ao main 
.................... }                         
04A8:  RETLW  00
....................  
....................  
....................  
.................... //________________________________________________________________________________ 
....................  
....................  
.................... void scan4(){            // Faz primeira varredura 
....................  
....................    int aux=100;           // ,Serve para ser a condição do while 
04AA:  MOVLW  64
04AC:  MOVWF  0F
....................    while(aux != 0)       // Loop para varre as colunas do teclado 
....................    { 
04AE:  MOVF   0F,F
04B0:  BZ    04F8
....................       output_high(L1);    // Implementa 0 na coluna a ser verificada,quarta linha da matriz 
04B2:  BCF    F95.1
04B4:  BSF    F8C.1
....................       output_high(L2); 
04B6:  BCF    F95.2
04B8:  BSF    F8C.2
....................       output_high(L3); 
04BA:  BCF    F95.3
04BC:  BSF    F8C.3
....................       output_low(L4); 
04BE:  BCF    F95.4
04C0:  BCF    F8C.4
....................  
....................       if(input(C1) == 0)     // Varre primeira coluna 
04C2:  BSF    F95.6
04C4:  BTFSC  F83.6
04C6:  BRA    04D0
....................       { 
....................           
....................                                     
....................           
....................          delay_ms(20);   // Tempo para soltar tecla 
04C8:  MOVLW  14
04CA:  MOVWF  10
04CC:  RCALL  0320
....................           break;//Não faz nada 
04CE:  BRA    04F8
....................       } 
....................  
....................       if(input(C2) == 0)     // Varre segunda coluna 
04D0:  BSF    F95.5
04D2:  BTFSC  F83.5
04D4:  BRA    04E0
....................       { 
....................          i = 0; 
04D6:  CLRF   06
....................          j++; 
04D8:  INCF   07,F
....................          delay_ms(20);   // Tempo para soltar a tecla 
04DA:  MOVLW  14
04DC:  MOVWF  10
04DE:  RCALL  0320
....................                           
....................       } 
....................  
....................       if(input(C3) == 0)     // Varre terceira coluna 
04E0:  BSF    F95.0
04E2:  BTFSC  F83.0
04E4:  BRA    04EE
....................       { 
....................           
....................          delay_ms(20);   // Tempo para soltar tecla 
04E6:  MOVLW  14
04E8:  MOVWF  10
04EA:  RCALL  0320
....................          break; //Não faz nada            
04EC:  BRA    04F8
....................       } 
....................  
....................       aux--;             // Decrementa 1 de aux 
04EE:  DECF   0F,F
....................       delay_us(aux);      
04F0:  MOVFF  0F,10
04F4:  RCALL  0348
....................    } 
04F6:  BRA    04AE
....................  
....................       output_high(L1); 
04F8:  BCF    F95.1
04FA:  BSF    F8C.1
....................       output_high(L2); 
04FC:  BCF    F95.2
04FE:  BSF    F8C.2
....................       output_high(L3); 
0500:  BCF    F95.3
0502:  BSF    F8C.3
....................       output_high(L4); 
0504:  BCF    F95.4
0506:  BSF    F8C.4
....................  
....................    return;               // Retorna ao main 
.................... }                         
0508:  RETLW  00
....................  
....................  
....................  
.................... //________________________________________________________________________________ 
....................  
....................  
.................... void BIP(){ 
....................       output_high(B); 
050A:  BCF    F93.3
050C:  BSF    F8A.3
....................       delay_ms(100); 
050E:  MOVLW  64
0510:  MOVWF  10
0512:  RCALL  0320
....................       output_low(B); 
0514:  BCF    F93.3
0516:  BCF    F8A.3
.................... } 
0518:  RETLW  00
....................  
....................  
.................... //________________________________________________________________________________ 
....................  
....................  
.................... void ABRIR(){ 
....................       output_high(B); 
*
060A:  BCF    F93.3
060C:  BSF    F8A.3
....................       output_high(T); 
060E:  BCF    F93.2
0610:  BSF    F8A.2
....................       delay_ms(3000); 
0612:  MOVLW  0C
0614:  MOVWF  0F
0616:  MOVLW  FA
0618:  MOVWF  10
061A:  RCALL  0320
061C:  DECFSZ 0F,F
061E:  BRA    0616
....................       output_low(T); 
0620:  BCF    F93.2
0622:  BCF    F8A.2
....................       output_low(B); 
0624:  BCF    F93.3
0626:  BCF    F8A.3
.................... } 
0628:  GOTO   0AFE (RETURN)
....................  
.................... //________________________________________________________________________________ 
....................  
....................  
....................  
.................... void main() 
....................     { 
062C:  CLRF   FF8
062E:  BCF    FD0.7
0630:  CLRF   FEA
0632:  CLRF   FE9
0634:  MOVF   FC1,W
0636:  ANDLW  C0
0638:  IORLW  0F
063A:  MOVWF  FC1
063C:  MOVLW  07
063E:  MOVWF  FB4
0640:  MOVLW  01
0642:  MOVWF  05
0644:  CLRF   06
0646:  CLRF   07
.................... //Variaveis de armazenamento 
....................      int s1 = 0; 
0648:  CLRF   08
....................      int s2 = 0; 
064A:  CLRF   09
....................      int s3 = 0; 
064C:  CLRF   0A
....................      int s4 = 0; 
064E:  CLRF   0B
....................      int s5 = 0; 
0650:  CLRF   0C
....................      int s6 = 0; 
0652:  CLRF   0D
....................      int s7 = 0; 
0654:  CLRF   0E
....................  
....................     set_tris_d(0b11100001); //Entradas e saidas da porta "d" 
0656:  MOVLW  E1
0658:  MOVWF  F95
....................     set_tris_b(0b00000000); //Entradas e saidas da porta "b" 
065A:  MOVLW  00
065C:  MOVWF  F93
....................     PORTB=0x000000000;      //Coloca todas as portas de "b" 0 
065E:  CLRF   F81
....................     PORTD=0x000000000;      //Coloca todas as portas de "d" 0 
0660:  CLRF   F83
....................     lcd_inicializa(); 
0662:  BRA    0284
....................  
....................     while(1)                      
....................     { 
....................  
....................            while(j == 0) 
....................             { 
0664:  MOVF   07,F
0666:  BNZ   06F4
....................   
....................               
....................              lcd_posicao(1,5); 
0668:  MOVLW  01
066A:  MOVWF  16
066C:  MOVLW  05
066E:  MOVWF  17
0670:  RCALL  0202
....................         printf(lcd_escreve,"BEM-VINDO"); 
0672:  CLRF   0F
0674:  MOVF   0F,W
0676:  RCALL  003A
0678:  INCF   0F,F
067A:  MOVWF  00
067C:  MOVWF  15
067E:  RCALL  0224
0680:  MOVLW  09
0682:  SUBWF  0F,W
0684:  BNZ   0674
....................                  delay_ms(500); 
0686:  MOVLW  02
0688:  MOVWF  0F
068A:  MOVLW  FA
068C:  MOVWF  10
068E:  RCALL  0320
0690:  DECFSZ 0F,F
0692:  BRA    068A
....................              lcd_posicao(2,1); 
0694:  MOVLW  02
0696:  MOVWF  16
0698:  MOVLW  01
069A:  MOVWF  17
069C:  RCALL  0202
....................         printf(lcd_escreve,"INFORME A SENHA:"); 
069E:  CLRF   0F
06A0:  MOVF   0F,W
06A2:  RCALL  0054
06A4:  INCF   0F,F
06A6:  MOVWF  00
06A8:  MOVWF  15
06AA:  RCALL  0224
06AC:  MOVLW  10
06AE:  SUBWF  0F,W
06B0:  BNZ   06A0
....................                  delay_ms(500); 
06B2:  MOVLW  02
06B4:  MOVWF  0F
06B6:  MOVLW  FA
06B8:  MOVWF  10
06BA:  RCALL  0320
06BC:  DECFSZ 0F,F
06BE:  BRA    06B6
....................              lcd_posicao(1,1); 
06C0:  MOVLW  01
06C2:  MOVWF  16
06C4:  MOVWF  17
06C6:  RCALL  0202
....................         printf(lcd_escreve,"                   "); 
06C8:  CLRF   0F
06CA:  MOVF   0F,W
06CC:  RCALL  0076
06CE:  INCF   0F,F
06D0:  MOVWF  00
06D2:  MOVWF  15
06D4:  RCALL  0224
06D6:  MOVLW  13
06D8:  SUBWF  0F,W
06DA:  BNZ   06CA
....................                 delay_ms(1000); 
06DC:  MOVLW  04
06DE:  MOVWF  0F
06E0:  MOVLW  FA
06E2:  MOVWF  10
06E4:  RCALL  0320
06E6:  DECFSZ 0F,F
06E8:  BRA    06E0
....................  
....................                 scan1(); 
06EA:  RCALL  036C
....................                 scan2(); 
06EC:  RCALL  03D6
....................                 scan3(); 
06EE:  RCALL  0440
....................                 scan4(); 
06F0:  RCALL  04AA
....................  
....................             } 
06F2:  BRA    0664
....................              lcd_posicao(2,1); 
06F4:  MOVLW  02
06F6:  MOVWF  16
06F8:  MOVLW  01
06FA:  MOVWF  17
06FC:  RCALL  0202
....................         printf(lcd_escreve,"                   "); 
06FE:  CLRF   0F
0700:  MOVF   0F,W
0702:  RCALL  0076
0704:  INCF   0F,F
0706:  MOVWF  00
0708:  MOVWF  15
070A:  RCALL  0224
070C:  MOVLW  13
070E:  SUBWF  0F,W
0710:  BNZ   0700
....................                 delay_ms(200); 
0712:  MOVLW  C8
0714:  MOVWF  10
0716:  RCALL  0320
....................             BIP(); 
0718:  RCALL  050A
....................  
....................               lcd_posicao(1,5); 
071A:  MOVLW  01
071C:  MOVWF  16
071E:  MOVLW  05
0720:  MOVWF  17
0722:  RCALL  0202
....................          printf(lcd_escreve,"  SENHA   "); 
0724:  CLRF   0F
0726:  MOVF   0F,W
0728:  RCALL  009A
072A:  INCF   0F,F
072C:  MOVWF  00
072E:  MOVWF  15
0730:  RCALL  0224
0732:  MOVLW  0A
0734:  SUBWF  0F,W
0736:  BNZ   0726
....................               lcd_posicao(2,6); 
0738:  MOVLW  02
073A:  MOVWF  16
073C:  MOVLW  06
073E:  MOVWF  17
0740:  RCALL  0202
....................           printf(lcd_escreve,"%d",i); 
0742:  MOVFF  06,0F
0746:  MOVLW  1F
0748:  MOVWF  10
074A:  RCALL  0542
....................                 delay_ms(150); 
074C:  MOVLW  96
074E:  MOVWF  10
0750:  RCALL  0320
....................            
....................           
....................             s1 = i; 
0752:  MOVFF  06,08
....................             delay_ms(150); 
0756:  MOVLW  96
0758:  MOVWF  10
075A:  RCALL  0320
....................             j = 1; 
075C:  MOVLW  01
075E:  MOVWF  07
....................  
....................             while(j == 1) 
....................             { 
0760:  DECFSZ 07,W
0762:  BRA    079C
....................                
....................                lcd_posicao(1,5); 
0764:  MOVLW  01
0766:  MOVWF  16
0768:  MOVLW  05
076A:  MOVWF  17
076C:  RCALL  0202
....................           printf(lcd_escreve,"  SENHA    "); 
076E:  CLRF   0F
0770:  MOVF   0F,W
0772:  RCALL  00B6
0774:  INCF   0F,F
0776:  MOVWF  00
0778:  MOVWF  15
077A:  RCALL  0224
077C:  MOVLW  0B
077E:  SUBWF  0F,W
0780:  BNZ   0770
....................                 lcd_posicao(2,6); 
0782:  MOVLW  02
0784:  MOVWF  16
0786:  MOVLW  06
0788:  MOVWF  17
078A:  RCALL  0202
....................             
....................            printf(lcd_escreve,"*"); 
078C:  MOVLW  2A
078E:  MOVWF  15
0790:  RCALL  0224
....................                 scan1(); 
0792:  RCALL  036C
....................                 scan2(); 
0794:  RCALL  03D6
....................                 scan3(); 
0796:  RCALL  0440
....................                 scan4(); 
0798:  RCALL  04AA
....................             } 
079A:  BRA    0760
....................             BIP(); 
079C:  RCALL  050A
....................                lcd_posicao(1,5); 
079E:  MOVLW  01
07A0:  MOVWF  16
07A2:  MOVLW  05
07A4:  MOVWF  17
07A6:  RCALL  0202
....................           printf(lcd_escreve,"  SENHA    "); 
07A8:  CLRF   0F
07AA:  MOVF   0F,W
07AC:  RCALL  00B6
07AE:  INCF   0F,F
07B0:  MOVWF  00
07B2:  MOVWF  15
07B4:  RCALL  0224
07B6:  MOVLW  0B
07B8:  SUBWF  0F,W
07BA:  BNZ   07AA
....................                 lcd_posicao(2,7); 
07BC:  MOVLW  02
07BE:  MOVWF  16
07C0:  MOVLW  07
07C2:  MOVWF  17
07C4:  RCALL  0202
....................            printf(lcd_escreve,"%d",i); 
07C6:  MOVFF  06,0F
07CA:  MOVLW  1F
07CC:  MOVWF  10
07CE:  RCALL  0542
....................             s2 = i; 
07D0:  MOVFF  06,09
....................             delay_ms(200); 
07D4:  MOVLW  C8
07D6:  MOVWF  10
07D8:  RCALL  0320
....................             j = 2; 
07DA:  MOVLW  02
07DC:  MOVWF  07
....................  
....................             while(j == 2) 
....................             { 
07DE:  MOVF   07,W
07E0:  SUBLW  02
07E2:  BNZ   081C
....................               
....................                lcd_posicao(1,5); 
07E4:  MOVLW  01
07E6:  MOVWF  16
07E8:  MOVLW  05
07EA:  MOVWF  17
07EC:  RCALL  0202
....................           printf(lcd_escreve,"  SENHA    "); 
07EE:  CLRF   0F
07F0:  MOVF   0F,W
07F2:  RCALL  00B6
07F4:  INCF   0F,F
07F6:  MOVWF  00
07F8:  MOVWF  15
07FA:  RCALL  0224
07FC:  MOVLW  0B
07FE:  SUBWF  0F,W
0800:  BNZ   07F0
....................                 lcd_posicao(2,7); 
0802:  MOVLW  02
0804:  MOVWF  16
0806:  MOVLW  07
0808:  MOVWF  17
080A:  RCALL  0202
....................            printf(lcd_escreve,"*"); 
080C:  MOVLW  2A
080E:  MOVWF  15
0810:  RCALL  0224
....................                 scan1(); 
0812:  RCALL  036C
....................                 scan2(); 
0814:  RCALL  03D6
....................                 scan3(); 
0816:  RCALL  0440
....................                 scan4(); 
0818:  RCALL  04AA
....................             } 
081A:  BRA    07DE
....................             BIP(); 
081C:  RCALL  050A
....................                lcd_posicao(1,5); 
081E:  MOVLW  01
0820:  MOVWF  16
0822:  MOVLW  05
0824:  MOVWF  17
0826:  RCALL  0202
....................           printf(lcd_escreve,"  SENHA    "); 
0828:  CLRF   0F
082A:  MOVF   0F,W
082C:  RCALL  00B6
082E:  INCF   0F,F
0830:  MOVWF  00
0832:  MOVWF  15
0834:  RCALL  0224
0836:  MOVLW  0B
0838:  SUBWF  0F,W
083A:  BNZ   082A
....................                 lcd_posicao(2,8); 
083C:  MOVLW  02
083E:  MOVWF  16
0840:  MOVLW  08
0842:  MOVWF  17
0844:  RCALL  0202
....................            printf(lcd_escreve,"%d",i); 
0846:  MOVFF  06,0F
084A:  MOVLW  1F
084C:  MOVWF  10
084E:  RCALL  0542
....................             s3 = i; 
0850:  MOVFF  06,0A
....................             delay_ms(200); 
0854:  MOVLW  C8
0856:  MOVWF  10
0858:  RCALL  0320
....................             j = 3; 
085A:  MOVLW  03
085C:  MOVWF  07
....................  
....................             while(j == 3) 
....................             { 
085E:  MOVF   07,W
0860:  SUBLW  03
0862:  BNZ   089C
....................              
....................                 lcd_posicao(1,5); 
0864:  MOVLW  01
0866:  MOVWF  16
0868:  MOVLW  05
086A:  MOVWF  17
086C:  RCALL  0202
....................            printf(lcd_escreve,"  SENHA    "); 
086E:  CLRF   0F
0870:  MOVF   0F,W
0872:  RCALL  00B6
0874:  INCF   0F,F
0876:  MOVWF  00
0878:  MOVWF  15
087A:  RCALL  0224
087C:  MOVLW  0B
087E:  SUBWF  0F,W
0880:  BNZ   0870
....................                  lcd_posicao(2,8); 
0882:  MOVLW  02
0884:  MOVWF  16
0886:  MOVLW  08
0888:  MOVWF  17
088A:  RCALL  0202
....................             printf(lcd_escreve,"*"); 
088C:  MOVLW  2A
088E:  MOVWF  15
0890:  RCALL  0224
....................                 scan1(); 
0892:  RCALL  036C
....................                 scan2(); 
0894:  RCALL  03D6
....................                 scan3(); 
0896:  RCALL  0440
....................                 scan4(); 
0898:  RCALL  04AA
....................             } 
089A:  BRA    085E
....................             BIP(); 
089C:  RCALL  050A
....................                  lcd_posicao(1,5); 
089E:  MOVLW  01
08A0:  MOVWF  16
08A2:  MOVLW  05
08A4:  MOVWF  17
08A6:  RCALL  0202
....................             printf(lcd_escreve,"  SENHA    "); 
08A8:  CLRF   0F
08AA:  MOVF   0F,W
08AC:  RCALL  00B6
08AE:  INCF   0F,F
08B0:  MOVWF  00
08B2:  MOVWF  15
08B4:  RCALL  0224
08B6:  MOVLW  0B
08B8:  SUBWF  0F,W
08BA:  BNZ   08AA
....................                   lcd_posicao(2,9); 
08BC:  MOVLW  02
08BE:  MOVWF  16
08C0:  MOVLW  09
08C2:  MOVWF  17
08C4:  RCALL  0202
....................              printf(lcd_escreve,"%d",i); 
08C6:  MOVFF  06,0F
08CA:  MOVLW  1F
08CC:  MOVWF  10
08CE:  RCALL  0542
....................             s4 = i; 
08D0:  MOVFF  06,0B
....................             delay_ms(200); 
08D4:  MOVLW  C8
08D6:  MOVWF  10
08D8:  RCALL  0320
....................             j = 4; 
08DA:  MOVLW  04
08DC:  MOVWF  07
....................  
....................             while(j == 4) 
....................             { 
08DE:  MOVF   07,W
08E0:  SUBLW  04
08E2:  BNZ   091E
....................           
....................                   lcd_posicao(1,5); 
08E4:  MOVLW  01
08E6:  MOVWF  16
08E8:  MOVLW  05
08EA:  MOVWF  17
08EC:  RCALL  0202
....................              printf(lcd_escreve,"  SENHA    "); 
08EE:  CLRF   0F
08F0:  MOVF   0F,W
08F2:  CALL   00B6
08F6:  INCF   0F,F
08F8:  MOVWF  00
08FA:  MOVWF  15
08FC:  RCALL  0224
08FE:  MOVLW  0B
0900:  SUBWF  0F,W
0902:  BNZ   08F0
....................                    lcd_posicao(2,9); 
0904:  MOVLW  02
0906:  MOVWF  16
0908:  MOVLW  09
090A:  MOVWF  17
090C:  RCALL  0202
....................               printf(lcd_escreve,"*"); 
090E:  MOVLW  2A
0910:  MOVWF  15
0912:  RCALL  0224
....................                 scan1(); 
0914:  RCALL  036C
....................                 scan2(); 
0916:  RCALL  03D6
....................                 scan3(); 
0918:  RCALL  0440
....................                 scan4(); 
091A:  RCALL  04AA
....................             } 
091C:  BRA    08DE
....................             BIP(); 
091E:  RCALL  050A
....................                    lcd_posicao(1,5); 
0920:  MOVLW  01
0922:  MOVWF  16
0924:  MOVLW  05
0926:  MOVWF  17
0928:  RCALL  0202
....................              printf(lcd_escreve,"  SENHA    "); 
092A:  CLRF   0F
092C:  MOVF   0F,W
092E:  CALL   00B6
0932:  INCF   0F,F
0934:  MOVWF  00
0936:  MOVWF  15
0938:  RCALL  0224
093A:  MOVLW  0B
093C:  SUBWF  0F,W
093E:  BNZ   092C
....................                    lcd_posicao(2,10); 
0940:  MOVLW  02
0942:  MOVWF  16
0944:  MOVLW  0A
0946:  MOVWF  17
0948:  RCALL  0202
....................               printf(lcd_escreve,"%d",i); 
094A:  MOVFF  06,0F
094E:  MOVLW  1F
0950:  MOVWF  10
0952:  RCALL  0542
....................             s5 = i; 
0954:  MOVFF  06,0C
....................             delay_ms(200); 
0958:  MOVLW  C8
095A:  MOVWF  10
095C:  RCALL  0320
....................             j = 5;      
095E:  MOVLW  05
0960:  MOVWF  07
.................... while(j == 5) 
....................             { 
0962:  MOVF   07,W
0964:  SUBLW  05
0966:  BNZ   09A2
....................              
....................                 lcd_posicao(1,5); 
0968:  MOVLW  01
096A:  MOVWF  16
096C:  MOVLW  05
096E:  MOVWF  17
0970:  RCALL  0202
....................            printf(lcd_escreve,"  SENHA    "); 
0972:  CLRF   0F
0974:  MOVF   0F,W
0976:  CALL   00B6
097A:  INCF   0F,F
097C:  MOVWF  00
097E:  MOVWF  15
0980:  RCALL  0224
0982:  MOVLW  0B
0984:  SUBWF  0F,W
0986:  BNZ   0974
....................                  lcd_posicao(2,10); 
0988:  MOVLW  02
098A:  MOVWF  16
098C:  MOVLW  0A
098E:  MOVWF  17
0990:  RCALL  0202
....................             printf(lcd_escreve,"*"); 
0992:  MOVLW  2A
0994:  MOVWF  15
0996:  RCALL  0224
....................                 scan1(); 
0998:  RCALL  036C
....................                 scan2(); 
099A:  RCALL  03D6
....................                 scan3(); 
099C:  RCALL  0440
....................                 scan4(); 
099E:  RCALL  04AA
....................             } 
09A0:  BRA    0962
....................             BIP(); 
09A2:  RCALL  050A
....................                  lcd_posicao(1,5); 
09A4:  MOVLW  01
09A6:  MOVWF  16
09A8:  MOVLW  05
09AA:  MOVWF  17
09AC:  RCALL  0202
....................             printf(lcd_escreve,"  SENHA    "); 
09AE:  CLRF   0F
09B0:  MOVF   0F,W
09B2:  CALL   00B6
09B6:  INCF   0F,F
09B8:  MOVWF  00
09BA:  MOVWF  15
09BC:  RCALL  0224
09BE:  MOVLW  0B
09C0:  SUBWF  0F,W
09C2:  BNZ   09B0
....................                   lcd_posicao(2,11); 
09C4:  MOVLW  02
09C6:  MOVWF  16
09C8:  MOVLW  0B
09CA:  MOVWF  17
09CC:  RCALL  0202
....................              printf(lcd_escreve,"%d",i); 
09CE:  MOVFF  06,0F
09D2:  MOVLW  1F
09D4:  MOVWF  10
09D6:  RCALL  0542
....................             s6 = i; 
09D8:  MOVFF  06,0D
....................             delay_ms(200); 
09DC:  MOVLW  C8
09DE:  MOVWF  10
09E0:  RCALL  0320
....................             j = 6; 
09E2:  MOVLW  06
09E4:  MOVWF  07
....................            while(j == 6) 
....................             { 
09E6:  MOVF   07,W
09E8:  SUBLW  06
09EA:  BNZ   0A28
....................              
....................                 lcd_posicao(1,5); 
09EC:  MOVLW  01
09EE:  MOVWF  16
09F0:  MOVLW  05
09F2:  MOVWF  17
09F4:  RCALL  0202
....................            printf(lcd_escreve,"  SENHA    "); 
09F6:  CLRF   0F
09F8:  MOVF   0F,W
09FA:  CALL   00B6
09FE:  INCF   0F,F
0A00:  MOVWF  00
0A02:  MOVWF  15
0A04:  RCALL  0224
0A06:  MOVLW  0B
0A08:  SUBWF  0F,W
0A0A:  BNZ   09F8
....................                  lcd_posicao(2,11); 
0A0C:  MOVLW  02
0A0E:  MOVWF  16
0A10:  MOVLW  0B
0A12:  MOVWF  17
0A14:  CALL   0202
....................             printf(lcd_escreve,"*"); 
0A18:  MOVLW  2A
0A1A:  MOVWF  15
0A1C:  RCALL  0224
....................              
....................                 scan1(); 
0A1E:  RCALL  036C
....................                 scan2(); 
0A20:  RCALL  03D6
....................                 scan3(); 
0A22:  RCALL  0440
....................                 scan4(); 
0A24:  RCALL  04AA
....................             } 
0A26:  BRA    09E6
....................             BIP(); 
0A28:  RCALL  050A
....................                  lcd_posicao(1,5); 
0A2A:  MOVLW  01
0A2C:  MOVWF  16
0A2E:  MOVLW  05
0A30:  MOVWF  17
0A32:  CALL   0202
....................             printf(lcd_escreve,"  SENHA    "); 
0A36:  CLRF   0F
0A38:  MOVF   0F,W
0A3A:  CALL   00B6
0A3E:  INCF   0F,F
0A40:  MOVWF  00
0A42:  MOVWF  15
0A44:  CALL   0224
0A48:  MOVLW  0B
0A4A:  SUBWF  0F,W
0A4C:  BNZ   0A38
....................                   lcd_posicao(2,12); 
0A4E:  MOVLW  02
0A50:  MOVWF  16
0A52:  MOVLW  0C
0A54:  MOVWF  17
0A56:  CALL   0202
....................              printf(lcd_escreve,"*"); 
0A5A:  MOVLW  2A
0A5C:  MOVWF  15
0A5E:  CALL   0224
....................             s7 = i; 
0A62:  MOVFF  06,0E
....................             delay_ms(300); 
0A66:  MOVLW  02
0A68:  MOVWF  0F
0A6A:  MOVLW  96
0A6C:  MOVWF  10
0A6E:  RCALL  0320
0A70:  DECFSZ 0F,F
0A72:  BRA    0A6A
....................             j = 7; 
0A74:  MOVLW  07
0A76:  MOVWF  07
....................             if( j == 7 ) 
0A78:  MOVF   07,W
0A7A:  SUBLW  07
0A7C:  BTFSS  FD8.2
0A7E:  BRA    0C42
....................             { 
....................                 
....................                 if(s1 == 2 && s2 == 4 && s3 == 8 && s4 == 8 && s5 == 4 && s6==2 && s7 ==0 ) 
0A80:  MOVF   08,W
0A82:  SUBLW  02
0A84:  BTFSS  FD8.2
0A86:  BRA    0B60
0A88:  MOVF   09,W
0A8A:  SUBLW  04
0A8C:  BTFSS  FD8.2
0A8E:  BRA    0B60
0A90:  MOVF   0A,W
0A92:  SUBLW  08
0A94:  BNZ   0B60
0A96:  MOVF   0B,W
0A98:  SUBLW  08
0A9A:  BNZ   0B60
0A9C:  MOVF   0C,W
0A9E:  SUBLW  04
0AA0:  BNZ   0B60
0AA2:  MOVF   0D,W
0AA4:  SUBLW  02
0AA6:  BNZ   0B60
0AA8:  MOVF   0E,F
0AAA:  BNZ   0B60
.................... { 
....................  
....................                      
....................                   lcd_posicao(1,3); 
0AAC:  MOVLW  01
0AAE:  MOVWF  16
0AB0:  MOVLW  03
0AB2:  MOVWF  17
0AB4:  CALL   0202
....................              printf(lcd_escreve,"SENHA CORRETA"); 
0AB8:  CLRF   0F
0ABA:  MOVF   0F,W
0ABC:  CALL   00D2
0AC0:  INCF   0F,F
0AC2:  MOVWF  00
0AC4:  MOVWF  15
0AC6:  CALL   0224
0ACA:  MOVLW  0D
0ACC:  SUBWF  0F,W
0ACE:  BNZ   0ABA
....................                   lcd_posicao(2,5); 
0AD0:  MOVLW  02
0AD2:  MOVWF  16
0AD4:  MOVLW  05
0AD6:  MOVWF  17
0AD8:  CALL   0202
....................              printf(lcd_escreve,"BEM VINDO"); 
0ADC:  CLRF   0F
0ADE:  MOVF   0F,W
0AE0:  CALL   00F0
0AE4:  INCF   0F,F
0AE6:  MOVWF  00
0AE8:  MOVWF  15
0AEA:  CALL   0224
0AEE:  MOVLW  09
0AF0:  SUBWF  0F,W
0AF2:  BNZ   0ADE
....................  
....................                           BIP(); 
0AF4:  RCALL  050A
....................                           delay_ms(100); 
0AF6:  MOVLW  64
0AF8:  MOVWF  10
0AFA:  RCALL  0320
....................                           ABRIR(); 
0AFC:  BRA    060A
....................                           delay_ms(5000); 
0AFE:  MOVLW  14
0B00:  MOVWF  0F
0B02:  MOVLW  FA
0B04:  MOVWF  10
0B06:  RCALL  0320
0B08:  DECFSZ 0F,F
0B0A:  BRA    0B02
....................                           BIP(); 
0B0C:  RCALL  050A
....................                           delay_ms(100); 
0B0E:  MOVLW  64
0B10:  MOVWF  10
0B12:  RCALL  0320
....................  
....................                 lcd_posicao(1,2); 
0B14:  MOVLW  01
0B16:  MOVWF  16
0B18:  MOVLW  02
0B1A:  MOVWF  17
0B1C:  CALL   0202
....................            printf(lcd_escreve,"               "); 
0B20:  CLRF   0F
0B22:  MOVF   0F,W
0B24:  CALL   010A
0B28:  INCF   0F,F
0B2A:  MOVWF  00
0B2C:  MOVWF  15
0B2E:  CALL   0224
0B32:  MOVLW  0F
0B34:  SUBWF  0F,W
0B36:  BNZ   0B22
....................                 lcd_posicao(2,2); 
0B38:  MOVLW  02
0B3A:  MOVWF  16
0B3C:  MOVWF  17
0B3E:  CALL   0202
....................            printf(lcd_escreve,"               "); 
0B42:  CLRF   0F
0B44:  MOVF   0F,W
0B46:  CALL   010A
0B4A:  INCF   0F,F
0B4C:  MOVWF  00
0B4E:  MOVWF  15
0B50:  CALL   0224
0B54:  MOVLW  0F
0B56:  SUBWF  0F,W
0B58:  BNZ   0B44
....................                      i = 0; 
0B5A:  CLRF   06
....................                      j = 0; 
0B5C:  CLRF   07
....................                                      
....................                 } 
....................                  
....................                                      
....................                 else 
0B5E:  BRA    0C30
....................                 { 
....................                 lcd_posicao(1,2); 
0B60:  MOVLW  01
0B62:  MOVWF  16
0B64:  MOVLW  02
0B66:  MOVWF  17
0B68:  CALL   0202
....................            printf(lcd_escreve,"SENHA INCORRETA"); 
0B6C:  CLRF   0F
0B6E:  MOVF   0F,W
0B70:  CALL   012A
0B74:  INCF   0F,F
0B76:  MOVWF  00
0B78:  MOVWF  15
0B7A:  CALL   0224
0B7E:  MOVLW  0F
0B80:  SUBWF  0F,W
0B82:  BNZ   0B6E
....................                 lcd_posicao(2,2); 
0B84:  MOVLW  02
0B86:  MOVWF  16
0B88:  MOVWF  17
0B8A:  CALL   0202
....................            printf(lcd_escreve,"TENTE NOVAMENTE"); 
0B8E:  CLRF   0F
0B90:  MOVF   0F,W
0B92:  CALL   014A
0B96:  INCF   0F,F
0B98:  MOVWF  00
0B9A:  MOVWF  15
0B9C:  CALL   0224
0BA0:  MOVLW  0F
0BA2:  SUBWF  0F,W
0BA4:  BNZ   0B90
....................                            BIP(); 
0BA6:  RCALL  050A
....................                            delay_ms(100); 
0BA8:  MOVLW  64
0BAA:  MOVWF  10
0BAC:  CALL   0320
....................                            BIP(); 
0BB0:  RCALL  050A
....................                            delay_ms(100); 
0BB2:  MOVLW  64
0BB4:  MOVWF  10
0BB6:  CALL   0320
....................                            BIP(); 
0BBA:  RCALL  050A
....................                            delay_ms(100); 
0BBC:  MOVLW  64
0BBE:  MOVWF  10
0BC0:  CALL   0320
....................                            BIP(); 
0BC4:  RCALL  050A
....................                            delay_ms(100); 
0BC6:  MOVLW  64
0BC8:  MOVWF  10
0BCA:  CALL   0320
....................                            BIP(); 
0BCE:  RCALL  050A
....................                            delay_ms(100); 
0BD0:  MOVLW  64
0BD2:  MOVWF  10
0BD4:  CALL   0320
....................                            BIP(); 
0BD8:  RCALL  050A
....................                            delay_ms(3000); 
0BDA:  MOVLW  0C
0BDC:  MOVWF  0F
0BDE:  MOVLW  FA
0BE0:  MOVWF  10
0BE2:  CALL   0320
0BE6:  DECFSZ 0F,F
0BE8:  BRA    0BDE
....................                             
....................                 lcd_posicao(1,2); 
0BEA:  MOVLW  01
0BEC:  MOVWF  16
0BEE:  MOVLW  02
0BF0:  MOVWF  17
0BF2:  CALL   0202
....................            printf(lcd_escreve,"               "); 
0BF6:  CLRF   0F
0BF8:  MOVF   0F,W
0BFA:  CALL   010A
0BFE:  INCF   0F,F
0C00:  MOVWF  00
0C02:  MOVWF  15
0C04:  CALL   0224
0C08:  MOVLW  0F
0C0A:  SUBWF  0F,W
0C0C:  BNZ   0BF8
....................                 lcd_posicao(2,2); 
0C0E:  MOVLW  02
0C10:  MOVWF  16
0C12:  MOVWF  17
0C14:  CALL   0202
....................            printf(lcd_escreve,"               "); 
0C18:  CLRF   0F
0C1A:  MOVF   0F,W
0C1C:  CALL   010A
0C20:  INCF   0F,F
0C22:  MOVWF  00
0C24:  MOVWF  15
0C26:  CALL   0224
0C2A:  MOVLW  0F
0C2C:  SUBWF  0F,W
0C2E:  BNZ   0C1A
....................                 } 
....................                      i = 0; 
0C30:  CLRF   06
....................                      j = 0; 
0C32:  CLRF   07
....................                                     s1 = 0; 
0C34:  CLRF   08
....................                                     s2 = 0; 
0C36:  CLRF   09
....................                                     s3 = 0; 
0C38:  CLRF   0A
....................                                     s4 = 0; 
0C3A:  CLRF   0B
....................                                     s5 = 0; 
0C3C:  CLRF   0C
....................                                     s6 = 0; 
0C3E:  CLRF   0D
....................                                     s7 = 0; 
0C40:  CLRF   0E
.................... } 
....................     } 
0C42:  BRA    0664
.................... } 
0C44:  SLEEP 

Configuration Fuses:
   Word  1: 0020   XT NOIESO NOFCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN RESERVED
   Word  3: 8300   PBADEN CCP2C1 MCLR NOLPT1OSC RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
